// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SignatureDefT struct {
	Inputs []*TensorMapT
	Outputs []*TensorMapT
	MethodName string
	Key string
}

func (t *SignatureDefT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	inputsOffset := flatbuffers.UOffsetT(0)
	if t.Inputs != nil {
		inputsLength := len(t.Inputs)
		inputsOffsets := make([]flatbuffers.UOffsetT, inputsLength)
		for j := 0; j < inputsLength; j++ {
			inputsOffsets[j] = t.Inputs[j].Pack(builder)
		}
		SignatureDefStartInputsVector(builder, inputsLength)
		for j := inputsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(inputsOffsets[j])
		}
		inputsOffset = builder.EndVector(inputsLength)
	}
	outputsOffset := flatbuffers.UOffsetT(0)
	if t.Outputs != nil {
		outputsLength := len(t.Outputs)
		outputsOffsets := make([]flatbuffers.UOffsetT, outputsLength)
		for j := 0; j < outputsLength; j++ {
			outputsOffsets[j] = t.Outputs[j].Pack(builder)
		}
		SignatureDefStartOutputsVector(builder, outputsLength)
		for j := outputsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(outputsOffsets[j])
		}
		outputsOffset = builder.EndVector(outputsLength)
	}
	methodNameOffset := builder.CreateString(t.MethodName)
	keyOffset := builder.CreateString(t.Key)
	SignatureDefStart(builder)
	SignatureDefAddInputs(builder, inputsOffset)
	SignatureDefAddOutputs(builder, outputsOffset)
	SignatureDefAddMethodName(builder, methodNameOffset)
	SignatureDefAddKey(builder, keyOffset)
	return SignatureDefEnd(builder)
}

func (rcv *SignatureDef) UnPackTo(t *SignatureDefT) {
	inputsLength := rcv.InputsLength()
	t.Inputs = make([]*TensorMapT, inputsLength)
	for j := 0; j < inputsLength; j++ {
		x := TensorMap{}
		rcv.Inputs(&x, j)
		t.Inputs[j] = x.UnPack()
	}
	outputsLength := rcv.OutputsLength()
	t.Outputs = make([]*TensorMapT, outputsLength)
	for j := 0; j < outputsLength; j++ {
		x := TensorMap{}
		rcv.Outputs(&x, j)
		t.Outputs[j] = x.UnPack()
	}
	t.MethodName = string(rcv.MethodName())
	t.Key = string(rcv.Key())
}

func (rcv *SignatureDef) UnPack() *SignatureDefT {
	if rcv == nil { return nil }
	t := &SignatureDefT{}
	rcv.UnPackTo(t)
	return t
}

type SignatureDef struct {
	_tab flatbuffers.Table
}

func GetRootAsSignatureDef(buf []byte, offset flatbuffers.UOffsetT) *SignatureDef {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SignatureDef{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SignatureDef) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SignatureDef) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SignatureDef) Inputs(obj *TensorMap, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SignatureDef) InputsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SignatureDef) Outputs(obj *TensorMap, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SignatureDef) OutputsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SignatureDef) MethodName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SignatureDef) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SignatureDefStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SignatureDefAddInputs(builder *flatbuffers.Builder, inputs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(inputs), 0)
}
func SignatureDefStartInputsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SignatureDefAddOutputs(builder *flatbuffers.Builder, outputs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(outputs), 0)
}
func SignatureDefStartOutputsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SignatureDefAddMethodName(builder *flatbuffers.Builder, methodName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(methodName), 0)
}
func SignatureDefAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(key), 0)
}
func SignatureDefEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
