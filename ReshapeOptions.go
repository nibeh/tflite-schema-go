// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ReshapeOptionsT struct {
	NewShape []int32
}

func (t *ReshapeOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	newShapeOffset := flatbuffers.UOffsetT(0)
	if t.NewShape != nil {
		newShapeLength := len(t.NewShape)
		ReshapeOptionsStartNewShapeVector(builder, newShapeLength)
		for j := newShapeLength - 1; j >= 0; j-- {
			builder.PrependInt32(t.NewShape[j])
		}
		newShapeOffset = builder.EndVector(newShapeLength)
	}
	ReshapeOptionsStart(builder)
	ReshapeOptionsAddNewShape(builder, newShapeOffset)
	return ReshapeOptionsEnd(builder)
}

func (rcv *ReshapeOptions) UnPackTo(t *ReshapeOptionsT) {
	newShapeLength := rcv.NewShapeLength()
	t.NewShape = make([]int32, newShapeLength)
	for j := 0; j < newShapeLength; j++ {
		t.NewShape[j] = rcv.NewShape(j)
	}
}

func (rcv *ReshapeOptions) UnPack() *ReshapeOptionsT {
	if rcv == nil { return nil }
	t := &ReshapeOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type ReshapeOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsReshapeOptions(buf []byte, offset flatbuffers.UOffsetT) *ReshapeOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReshapeOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ReshapeOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ReshapeOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ReshapeOptions) NewShape(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *ReshapeOptions) NewShapeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ReshapeOptions) MutateNewShape(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func ReshapeOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ReshapeOptionsAddNewShape(builder *flatbuffers.Builder, newShape flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(newShape), 0)
}
func ReshapeOptionsStartNewShapeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ReshapeOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
