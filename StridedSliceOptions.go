// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StridedSliceOptionsT struct {
	BeginMask int32
	EndMask int32
	EllipsisMask int32
	NewAxisMask int32
	ShrinkAxisMask int32
}

func (t *StridedSliceOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	StridedSliceOptionsStart(builder)
	StridedSliceOptionsAddBeginMask(builder, t.BeginMask)
	StridedSliceOptionsAddEndMask(builder, t.EndMask)
	StridedSliceOptionsAddEllipsisMask(builder, t.EllipsisMask)
	StridedSliceOptionsAddNewAxisMask(builder, t.NewAxisMask)
	StridedSliceOptionsAddShrinkAxisMask(builder, t.ShrinkAxisMask)
	return StridedSliceOptionsEnd(builder)
}

func (rcv *StridedSliceOptions) UnPackTo(t *StridedSliceOptionsT) {
	t.BeginMask = rcv.BeginMask()
	t.EndMask = rcv.EndMask()
	t.EllipsisMask = rcv.EllipsisMask()
	t.NewAxisMask = rcv.NewAxisMask()
	t.ShrinkAxisMask = rcv.ShrinkAxisMask()
}

func (rcv *StridedSliceOptions) UnPack() *StridedSliceOptionsT {
	if rcv == nil { return nil }
	t := &StridedSliceOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type StridedSliceOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsStridedSliceOptions(buf []byte, offset flatbuffers.UOffsetT) *StridedSliceOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StridedSliceOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *StridedSliceOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StridedSliceOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StridedSliceOptions) BeginMask() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StridedSliceOptions) MutateBeginMask(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *StridedSliceOptions) EndMask() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StridedSliceOptions) MutateEndMask(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *StridedSliceOptions) EllipsisMask() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StridedSliceOptions) MutateEllipsisMask(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *StridedSliceOptions) NewAxisMask() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StridedSliceOptions) MutateNewAxisMask(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *StridedSliceOptions) ShrinkAxisMask() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StridedSliceOptions) MutateShrinkAxisMask(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func StridedSliceOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func StridedSliceOptionsAddBeginMask(builder *flatbuffers.Builder, beginMask int32) {
	builder.PrependInt32Slot(0, beginMask, 0)
}
func StridedSliceOptionsAddEndMask(builder *flatbuffers.Builder, endMask int32) {
	builder.PrependInt32Slot(1, endMask, 0)
}
func StridedSliceOptionsAddEllipsisMask(builder *flatbuffers.Builder, ellipsisMask int32) {
	builder.PrependInt32Slot(2, ellipsisMask, 0)
}
func StridedSliceOptionsAddNewAxisMask(builder *flatbuffers.Builder, newAxisMask int32) {
	builder.PrependInt32Slot(3, newAxisMask, 0)
}
func StridedSliceOptionsAddShrinkAxisMask(builder *flatbuffers.Builder, shrinkAxisMask int32) {
	builder.PrependInt32Slot(4, shrinkAxisMask, 0)
}
func StridedSliceOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
