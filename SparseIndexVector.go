// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type SparseIndexVector byte

const (
	SparseIndexVectorNONE         SparseIndexVector = 0
	SparseIndexVectorInt32Vector  SparseIndexVector = 1
	SparseIndexVectorUint16Vector SparseIndexVector = 2
	SparseIndexVectorUint8Vector  SparseIndexVector = 3
)

var EnumNamesSparseIndexVector = map[SparseIndexVector]string{
	SparseIndexVectorNONE:         "NONE",
	SparseIndexVectorInt32Vector:  "Int32Vector",
	SparseIndexVectorUint16Vector: "Uint16Vector",
	SparseIndexVectorUint8Vector:  "Uint8Vector",
}

var EnumValuesSparseIndexVector = map[string]SparseIndexVector{
	"NONE":         SparseIndexVectorNONE,
	"Int32Vector":  SparseIndexVectorInt32Vector,
	"Uint16Vector": SparseIndexVectorUint16Vector,
	"Uint8Vector":  SparseIndexVectorUint8Vector,
}

func (v SparseIndexVector) String() string {
	if s, ok := EnumNamesSparseIndexVector[v]; ok {
		return s
	}
	return "SparseIndexVector(" + strconv.FormatInt(int64(v), 10) + ")"
}

type SparseIndexVectorT struct {
	Type SparseIndexVector
	Value interface{}
}

func (t *SparseIndexVectorT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case SparseIndexVectorInt32Vector:
		return t.Value.(*Int32VectorT).Pack(builder)
	case SparseIndexVectorUint16Vector:
		return t.Value.(*Uint16VectorT).Pack(builder)
	case SparseIndexVectorUint8Vector:
		return t.Value.(*Uint8VectorT).Pack(builder)
	}
	return 0
}

func (rcv SparseIndexVector) UnPack(table flatbuffers.Table) *SparseIndexVectorT {
	switch rcv {
	case SparseIndexVectorInt32Vector:
		x := Int32Vector{_tab: table}
		return &SparseIndexVectorT{ Type: SparseIndexVectorInt32Vector, Value: x.UnPack() }
	case SparseIndexVectorUint16Vector:
		x := Uint16Vector{_tab: table}
		return &SparseIndexVectorT{ Type: SparseIndexVectorUint16Vector, Value: x.UnPack() }
	case SparseIndexVectorUint8Vector:
		x := Uint8Vector{_tab: table}
		return &SparseIndexVectorT{ Type: SparseIndexVectorUint8Vector, Value: x.UnPack() }
	}
	return nil
}
