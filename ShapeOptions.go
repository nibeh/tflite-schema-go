// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ShapeOptionsT struct {
	OutType TensorType
}

func (t *ShapeOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ShapeOptionsStart(builder)
	ShapeOptionsAddOutType(builder, t.OutType)
	return ShapeOptionsEnd(builder)
}

func (rcv *ShapeOptions) UnPackTo(t *ShapeOptionsT) {
	t.OutType = rcv.OutType()
}

func (rcv *ShapeOptions) UnPack() *ShapeOptionsT {
	if rcv == nil { return nil }
	t := &ShapeOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type ShapeOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsShapeOptions(buf []byte, offset flatbuffers.UOffsetT) *ShapeOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ShapeOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ShapeOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ShapeOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ShapeOptions) OutType() TensorType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return TensorType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShapeOptions) MutateOutType(n TensorType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func ShapeOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ShapeOptionsAddOutType(builder *flatbuffers.Builder, outType TensorType) {
	builder.PrependInt8Slot(0, int8(outType), 0)
}
func ShapeOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
