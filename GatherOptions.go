// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GatherOptionsT struct {
	Axis int32
}

func (t *GatherOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	GatherOptionsStart(builder)
	GatherOptionsAddAxis(builder, t.Axis)
	return GatherOptionsEnd(builder)
}

func (rcv *GatherOptions) UnPackTo(t *GatherOptionsT) {
	t.Axis = rcv.Axis()
}

func (rcv *GatherOptions) UnPack() *GatherOptionsT {
	if rcv == nil { return nil }
	t := &GatherOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type GatherOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsGatherOptions(buf []byte, offset flatbuffers.UOffsetT) *GatherOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GatherOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GatherOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GatherOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GatherOptions) Axis() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GatherOptions) MutateAxis(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func GatherOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func GatherOptionsAddAxis(builder *flatbuffers.Builder, axis int32) {
	builder.PrependInt32Slot(0, axis, 0)
}
func GatherOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
