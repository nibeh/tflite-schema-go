// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SplitVOptionsT struct {
	NumSplits int32
}

func (t *SplitVOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	SplitVOptionsStart(builder)
	SplitVOptionsAddNumSplits(builder, t.NumSplits)
	return SplitVOptionsEnd(builder)
}

func (rcv *SplitVOptions) UnPackTo(t *SplitVOptionsT) {
	t.NumSplits = rcv.NumSplits()
}

func (rcv *SplitVOptions) UnPack() *SplitVOptionsT {
	if rcv == nil { return nil }
	t := &SplitVOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type SplitVOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsSplitVOptions(buf []byte, offset flatbuffers.UOffsetT) *SplitVOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SplitVOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SplitVOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SplitVOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SplitVOptions) NumSplits() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SplitVOptions) MutateNumSplits(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func SplitVOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SplitVOptionsAddNumSplits(builder *flatbuffers.Builder, numSplits int32) {
	builder.PrependInt32Slot(0, numSplits, 0)
}
func SplitVOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
