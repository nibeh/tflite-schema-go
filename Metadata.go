// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MetadataT struct {
	Name string
	Buffer uint32
}

func (t *MetadataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	MetadataStart(builder)
	MetadataAddName(builder, nameOffset)
	MetadataAddBuffer(builder, t.Buffer)
	return MetadataEnd(builder)
}

func (rcv *Metadata) UnPackTo(t *MetadataT) {
	t.Name = string(rcv.Name())
	t.Buffer = rcv.Buffer()
}

func (rcv *Metadata) UnPack() *MetadataT {
	if rcv == nil { return nil }
	t := &MetadataT{}
	rcv.UnPackTo(t)
	return t
}

type Metadata struct {
	_tab flatbuffers.Table
}

func GetRootAsMetadata(buf []byte, offset flatbuffers.UOffsetT) *Metadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Metadata{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Metadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Metadata) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Metadata) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Metadata) Buffer() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Metadata) MutateBuffer(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func MetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MetadataAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func MetadataAddBuffer(builder *flatbuffers.Builder, buffer uint32) {
	builder.PrependUint32Slot(1, buffer, 0)
}
func MetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
