// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type QuantizationDetails byte

const (
	QuantizationDetailsNONE               QuantizationDetails = 0
	QuantizationDetailsCustomQuantization QuantizationDetails = 1
)

var EnumNamesQuantizationDetails = map[QuantizationDetails]string{
	QuantizationDetailsNONE:               "NONE",
	QuantizationDetailsCustomQuantization: "CustomQuantization",
}

var EnumValuesQuantizationDetails = map[string]QuantizationDetails{
	"NONE":               QuantizationDetailsNONE,
	"CustomQuantization": QuantizationDetailsCustomQuantization,
}

func (v QuantizationDetails) String() string {
	if s, ok := EnumNamesQuantizationDetails[v]; ok {
		return s
	}
	return "QuantizationDetails(" + strconv.FormatInt(int64(v), 10) + ")"
}

type QuantizationDetailsT struct {
	Type QuantizationDetails
	Value interface{}
}

func (t *QuantizationDetailsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case QuantizationDetailsCustomQuantization:
		return t.Value.(*CustomQuantizationT).Pack(builder)
	}
	return 0
}

func (rcv QuantizationDetails) UnPack(table flatbuffers.Table) *QuantizationDetailsT {
	switch rcv {
	case QuantizationDetailsCustomQuantization:
		x := CustomQuantization{_tab: table}
		return &QuantizationDetailsT{ Type: QuantizationDetailsCustomQuantization, Value: x.UnPack() }
	}
	return nil
}
