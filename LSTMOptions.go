// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LSTMOptionsT struct {
	FusedActivationFunction ActivationFunctionType
	CellClip float32
	ProjClip float32
	KernelType LSTMKernelType
	AsymmetricQuantizeInputs bool
}

func (t *LSTMOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	LSTMOptionsStart(builder)
	LSTMOptionsAddFusedActivationFunction(builder, t.FusedActivationFunction)
	LSTMOptionsAddCellClip(builder, t.CellClip)
	LSTMOptionsAddProjClip(builder, t.ProjClip)
	LSTMOptionsAddKernelType(builder, t.KernelType)
	LSTMOptionsAddAsymmetricQuantizeInputs(builder, t.AsymmetricQuantizeInputs)
	return LSTMOptionsEnd(builder)
}

func (rcv *LSTMOptions) UnPackTo(t *LSTMOptionsT) {
	t.FusedActivationFunction = rcv.FusedActivationFunction()
	t.CellClip = rcv.CellClip()
	t.ProjClip = rcv.ProjClip()
	t.KernelType = rcv.KernelType()
	t.AsymmetricQuantizeInputs = rcv.AsymmetricQuantizeInputs()
}

func (rcv *LSTMOptions) UnPack() *LSTMOptionsT {
	if rcv == nil { return nil }
	t := &LSTMOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type LSTMOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsLSTMOptions(buf []byte, offset flatbuffers.UOffsetT) *LSTMOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LSTMOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LSTMOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LSTMOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LSTMOptions) FusedActivationFunction() ActivationFunctionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ActivationFunctionType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *LSTMOptions) MutateFusedActivationFunction(n ActivationFunctionType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *LSTMOptions) CellClip() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LSTMOptions) MutateCellClip(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *LSTMOptions) ProjClip() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LSTMOptions) MutateProjClip(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *LSTMOptions) KernelType() LSTMKernelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return LSTMKernelType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *LSTMOptions) MutateKernelType(n LSTMKernelType) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func (rcv *LSTMOptions) AsymmetricQuantizeInputs() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *LSTMOptions) MutateAsymmetricQuantizeInputs(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func LSTMOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func LSTMOptionsAddFusedActivationFunction(builder *flatbuffers.Builder, fusedActivationFunction ActivationFunctionType) {
	builder.PrependInt8Slot(0, int8(fusedActivationFunction), 0)
}
func LSTMOptionsAddCellClip(builder *flatbuffers.Builder, cellClip float32) {
	builder.PrependFloat32Slot(1, cellClip, 0.0)
}
func LSTMOptionsAddProjClip(builder *flatbuffers.Builder, projClip float32) {
	builder.PrependFloat32Slot(2, projClip, 0.0)
}
func LSTMOptionsAddKernelType(builder *flatbuffers.Builder, kernelType LSTMKernelType) {
	builder.PrependInt8Slot(3, int8(kernelType), 0)
}
func LSTMOptionsAddAsymmetricQuantizeInputs(builder *flatbuffers.Builder, asymmetricQuantizeInputs bool) {
	builder.PrependBoolSlot(4, asymmetricQuantizeInputs, false)
}
func LSTMOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
