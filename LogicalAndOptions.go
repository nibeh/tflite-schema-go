// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LogicalAndOptionsT struct {
}

func (t *LogicalAndOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	LogicalAndOptionsStart(builder)
	return LogicalAndOptionsEnd(builder)
}

func (rcv *LogicalAndOptions) UnPackTo(t *LogicalAndOptionsT) {
}

func (rcv *LogicalAndOptions) UnPack() *LogicalAndOptionsT {
	if rcv == nil { return nil }
	t := &LogicalAndOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type LogicalAndOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsLogicalAndOptions(buf []byte, offset flatbuffers.UOffsetT) *LogicalAndOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogicalAndOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LogicalAndOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogicalAndOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func LogicalAndOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(0)
}
func LogicalAndOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
