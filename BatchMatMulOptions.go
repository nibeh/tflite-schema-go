// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BatchMatMulOptionsT struct {
	AdjX bool
	AdjY bool
}

func (t *BatchMatMulOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	BatchMatMulOptionsStart(builder)
	BatchMatMulOptionsAddAdjX(builder, t.AdjX)
	BatchMatMulOptionsAddAdjY(builder, t.AdjY)
	return BatchMatMulOptionsEnd(builder)
}

func (rcv *BatchMatMulOptions) UnPackTo(t *BatchMatMulOptionsT) {
	t.AdjX = rcv.AdjX()
	t.AdjY = rcv.AdjY()
}

func (rcv *BatchMatMulOptions) UnPack() *BatchMatMulOptionsT {
	if rcv == nil { return nil }
	t := &BatchMatMulOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type BatchMatMulOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsBatchMatMulOptions(buf []byte, offset flatbuffers.UOffsetT) *BatchMatMulOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BatchMatMulOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BatchMatMulOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BatchMatMulOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BatchMatMulOptions) AdjX() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *BatchMatMulOptions) MutateAdjX(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *BatchMatMulOptions) AdjY() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *BatchMatMulOptions) MutateAdjY(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func BatchMatMulOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BatchMatMulOptionsAddAdjX(builder *flatbuffers.Builder, adjX bool) {
	builder.PrependBoolSlot(0, adjX, false)
}
func BatchMatMulOptionsAddAdjY(builder *flatbuffers.Builder, adjY bool) {
	builder.PrependBoolSlot(1, adjY, false)
}
func BatchMatMulOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
