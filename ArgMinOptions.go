// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ArgMinOptionsT struct {
	OutputType TensorType
}

func (t *ArgMinOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ArgMinOptionsStart(builder)
	ArgMinOptionsAddOutputType(builder, t.OutputType)
	return ArgMinOptionsEnd(builder)
}

func (rcv *ArgMinOptions) UnPackTo(t *ArgMinOptionsT) {
	t.OutputType = rcv.OutputType()
}

func (rcv *ArgMinOptions) UnPack() *ArgMinOptionsT {
	if rcv == nil { return nil }
	t := &ArgMinOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type ArgMinOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsArgMinOptions(buf []byte, offset flatbuffers.UOffsetT) *ArgMinOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ArgMinOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ArgMinOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ArgMinOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ArgMinOptions) OutputType() TensorType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return TensorType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ArgMinOptions) MutateOutputType(n TensorType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func ArgMinOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ArgMinOptionsAddOutputType(builder *flatbuffers.Builder, outputType TensorType) {
	builder.PrependInt8Slot(0, int8(outputType), 0)
}
func ArgMinOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
